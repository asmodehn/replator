//
// Lambda Calculus grammar -> towards Scheme
//
// Representation of Boehm Tree
// Inline transformer simplifying to normal form
// Interpretation then requires some operational semantics...
//

// Start symbols for the grammar:
//       single_input is a single interactive statement;
//       file_input is a module or sequence of commands read from an input file;
//       eval_input is the input for the eval() functions.
// NB: compound_stmt in single_input is followed by extra NEWLINE!
single_input: _NEWLINE | simple_stmt | compound_stmt _NEWLINE
file_input: (_NEWLINE | stmt)*
eval_input: testlist _NEWLINE*

start: appl

appl: "(" expr ")"                  -> apply

//A very basic lambda representation
//See https://stackoverflow.com/questions/33734170/why-doesnt-python-auto-escape-in-doc for backslash
abst: (LAMBDA vars* ":" expr)       -> abst

//A very basic lambda representation
expr: term | abst | appl

//Addon to pure lambda calculus
//for easy human manipulation
defn: (DEFINE NAME expr)            -> defn

vars: LCASE_LETTER                  -> vars

term: LCASE_LETTER                  -> term

%import common.CNAME                -> NAME
%import common.LCASE_LETTER
%import common.WS_INLINE
%import common.CR
%import common.LF

LAMBDA: "lambda"
DEFINE: "define"
NEWLINE: (CR? LF)
